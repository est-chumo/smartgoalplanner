{"ast":null,"code":"var _jsxFileName = \"/home/elvis/smartgoalplanner/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport GoalList from './components/GoalList';\nimport AddGoalForm from './components/AddGoalForm';\nimport Overview from './components/Overview';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [goals, setGoals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch goals from json-server\n  useEffect(() => {\n    const fetchGoals = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/goals');\n        if (!response.ok) {\n          throw new Error('Failed to fetch goals');\n        }\n        const data = await response.json();\n        setGoals(data);\n        setIsLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setIsLoading(false);\n      }\n    };\n    fetchGoals();\n  }, []);\n\n  // Add new goal\n  const addGoal = async newGoal => {\n    try {\n      const response = await fetch('http://localhost:3000/goals', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newGoal)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add goal');\n      }\n      const createdGoal = await response.json();\n      setGoals([...goals, createdGoal]);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Update goal\n  const updateGoal = async updatedGoal => {\n    try {\n      const response = await fetch(`http://localhost:3000/goals/${updatedGoal.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedGoal)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update goal');\n      }\n      setGoals(goals.map(goal => goal.id === updatedGoal.id ? updatedGoal : goal));\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Delete goal\n  const deleteGoal = async id => {\n    try {\n      const response = await fetch(`http://localhost:3000/goals/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete goal');\n      }\n      setGoals(goals.filter(goal => goal.id !== id));\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Make deposit to a goal\n  const makeDeposit = async (goalId, amount) => {\n    try {\n      const goalToUpdate = goals.find(goal => goal.id === goalId);\n      const updatedGoal = {\n        ...goalToUpdate,\n        savedAmount: Number(goalToUpdate.savedAmount) + Number(amount)\n      };\n      const response = await fetch(`http://localhost:3000/goals/${goalId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          savedAmount: updatedGoal.savedAmount\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to make deposit');\n      }\n      setGoals(goals.map(goal => goal.id === goalId ? updatedGoal : goal));\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Smart Goal Planner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Overview, {\n      goals: goals\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddGoalForm, {\n      onAddGoal: addGoal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoalList, {\n      goals: goals,\n      onUpdateGoal: updateGoal,\n      onDeleteGoal: deleteGoal,\n      onMakeDeposit: makeDeposit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AdoT5d0dEaBj4wVk1rB2XuUTICE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GoalList","AddGoalForm","Overview","jsxDEV","_jsxDEV","App","_s","goals","setGoals","isLoading","setIsLoading","error","setError","fetchGoals","response","fetch","ok","Error","data","json","err","message","addGoal","newGoal","method","headers","body","JSON","stringify","createdGoal","updateGoal","updatedGoal","id","map","goal","deleteGoal","filter","makeDeposit","goalId","amount","goalToUpdate","find","savedAmount","Number","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddGoal","onUpdateGoal","onDeleteGoal","onMakeDeposit","_c","$RefreshReg$"],"sources":["/home/elvis/smartgoalplanner/src/App.js"],"sourcesContent":["// App.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport GoalList from './components/GoalList';\r\nimport AddGoalForm from './components/AddGoalForm';\r\nimport Overview from './components/Overview';\r\nimport './styles.css';\r\n\r\nfunction App() {\r\n  const [goals, setGoals] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch goals from json-server\r\n  useEffect(() => {\r\n    const fetchGoals = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3000/goals');\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch goals');\r\n        }\r\n        const data = await response.json();\r\n        setGoals(data);\r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        setError(err.message);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchGoals();\r\n  }, []);\r\n\r\n  // Add new goal\r\n  const addGoal = async (newGoal) => {\r\n    try {\r\n      const response = await fetch('http://localhost:3000/goals', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newGoal),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to add goal');\r\n      }\r\n      const createdGoal = await response.json();\r\n      setGoals([...goals, createdGoal]);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Update goal\r\n  const updateGoal = async (updatedGoal) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/goals/${updatedGoal.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedGoal),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update goal');\r\n      }\r\n      setGoals(goals.map(goal => goal.id === updatedGoal.id ? updatedGoal : goal));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Delete goal\r\n  const deleteGoal = async (id) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/goals/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to delete goal');\r\n      }\r\n      setGoals(goals.filter(goal => goal.id !== id));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Make deposit to a goal\r\n  const makeDeposit = async (goalId, amount) => {\r\n    try {\r\n      const goalToUpdate = goals.find(goal => goal.id === goalId);\r\n      const updatedGoal = {\r\n        ...goalToUpdate,\r\n        savedAmount: Number(goalToUpdate.savedAmount) + Number(amount),\r\n      };\r\n\r\n      const response = await fetch(`http://localhost:3000/goals/${goalId}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ savedAmount: updatedGoal.savedAmount }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to make deposit');\r\n      }\r\n      setGoals(goals.map(goal => goal.id === goalId ? updatedGoal : goal));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  if (isLoading) return <div className=\"loading\">Loading...</div>;\r\n  if (error) return <div className=\"error\">Error: {error}</div>;\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Smart Goal Planner</h1>\r\n      <Overview goals={goals} />\r\n      <AddGoalForm onAddGoal={addGoal} />\r\n      <GoalList \r\n        goals={goals} \r\n        onUpdateGoal={updateGoal} \r\n        onDeleteGoal={deleteGoal} \r\n        onMakeDeposit={makeDeposit} \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}